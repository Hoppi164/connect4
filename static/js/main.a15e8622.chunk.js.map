{"version":3,"sources":["utils/gameEventHandlers.js","components/GameMenu.js","components/Coin.js","components/GameBoard.js","pages/ConnectFour.js","App.js","serviceWorker.js","index.js"],"names":["backendURL","window","location","origin","includes","console","log","socket","io","setMessage","onSocketConnected","a","requestRoomEntry","onSocketDisconnect","emit","roomID","onJoinedRoom","data","on","GameMenu","newGame","Grid","container","justify","Card","mt","noValidate","autoComplete","CardContent","ButtonGroup","variant","color","aria-label","Button","onClick","CardActions","item","xs","Box","TextField","id","label","fullWidth","useStyles","makeStyles","Blue","fill","Red","Yellow","White","Disabled","cursor","Enabled","Coin","rowIndex","colIndex","cell","isButtonsDisabled","dropCoin","classes","cy","cx","className","rx","ry","val","Slide","direction","in","timeout","marginx150","marginLeft","marginRight","GameBoard","grid","setGrid","redsTurn","theme","useTheme","isScreenLarge","useMediaQuery","breakpoints","up","Container","viewBox","version","width","height","map","row","ConnectFour","useState","message","setIsButtonsDisabled","setRedsTurn","directionsMatrix","vertical","south","north","horizontal","east","west","backward","southEast","northWest","forward","southWest","northEast","initialGrid","Array","from","length","playerHasWon","colnum","rowNum","playerColor","newGrid","axis","numMatches","cellReference","testCell","error","announceWinner","winnerColor","setTimeout","alert","useEffect","gameEventHandlers","_","cloneDeep","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a15e8622.chunk.js","sourcesContent":["import io from \"socket.io-client\";\r\n// Extract current url\r\nvar backendURL = window.location.origin;\r\n// If hosted online - set backend url to heroku app\r\nif (!backendURL.includes(\"localhost\")) {\r\n  backendURL = \"https://connect-4-backend.herokuapp.com/\";\r\n}\r\nconsole.log(\"backendURL\", backendURL);\r\n\r\nconst socket = io(backendURL);\r\n\r\nconst createListeners = (setMessage) => {\r\n  const onSocketConnected = async () => {\r\n    // Send local player data to the game server\r\n    // socket.emit(\"new player\", {name: 'test'});\r\n    console.log(\"Socket Connected\");\r\n    requestRoomEntry();\r\n    setMessage(\"Connected\");\r\n  };\r\n\r\n  const onSocketDisconnect = async () => {\r\n    // Socket disconnected\r\n    console.log(\"Disconnected from socket server\");\r\n  };\r\n\r\n  const requestRoomEntry = async () => {\r\n    let roomID = 1234;\r\n    console.log(`Requesting Entry To Room ${roomID}`);\r\n    socket.emit(\"requestRoomEntry\", { roomID: roomID });\r\n  };\r\n  const onJoinedRoom = async (data) => {\r\n    console.log(\"Room Joined\", data);\r\n    // socket.emit(\"joinRoom\", { roomID: \"1234\" });\r\n  };\r\n  // const socket = io.connect(\"http://localhost\", {port: 8000, transports: [\"websocket\"]});\r\n  // Start listening for events\r\n  // Socket connection successful\r\n  socket.on(\"connect\", onSocketConnected);\r\n  // Socket disconnection\r\n  socket.on(\"disconnect\", onSocketDisconnect);\r\n  // Socket connection successful\r\n  socket.on(\"joinedRoom\", onJoinedRoom);\r\n};\r\n\r\nexport default { createListeners };\r\n","import * as React from \"react\";\r\nimport {\r\n  Button,\r\n  TextField,\r\n  ButtonGroup,\r\n  Grid,\r\n  Box,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n} from \"@material-ui/core\";\r\n\r\nfunction GameMenu({newGame}) {\r\n  return (\r\n    <Grid container justify=\"center\">\r\n      <Card mt={2}>\r\n        <form noValidate autoComplete=\"off\">\r\n          <CardContent>\r\n            <ButtonGroup\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              aria-label=\"contained primary button group\"\r\n            >\r\n              <Button onClick={() => newGame()}>New Local Game</Button>\r\n\r\n              <Button>New Online Game</Button>\r\n              <Button>Join Online Room</Button>\r\n            </ButtonGroup>\r\n          </CardContent>\r\n          <CardActions>\r\n            <Grid item xs={12}>\r\n              <Box mt={1}>\r\n                <TextField\r\n                  id=\"outlined-basic\"\r\n                  label=\"Room ID\"\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                />\r\n              </Box>\r\n            </Grid>\r\n          </CardActions>\r\n        </form>\r\n      </Card>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default GameMenu;\r\n","import React, { useState } from \"react\";\r\nimport { Button, Paper, Container, Slide } from \"@material-ui/core\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n  Blue: {\r\n    fill: \"#0500fd\",\r\n  },\r\n  Red: {\r\n    fill: \"#ff0000ff\",\r\n  },\r\n  Yellow: {\r\n    fill: \"#ffff00ff\",\r\n  },\r\n  White: {\r\n    fill: \"#ffffff\",\r\n  },\r\n  Disabled: {\r\n    \"fill-opacity\": \"0.9\",\r\n    cursor: \"default\",\r\n  },\r\n  Enabled: {\r\n    \"fill-opacity\": \"1\",\r\n    cursor: \"pointer\",\r\n  },\r\n});\r\n\r\nconst coinRadius = 6.5;\r\nconst coinMargin = 1;\r\nfunction Coin({ rowIndex, colIndex, cell, isButtonsDisabled, dropCoin }) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <g>\r\n      {/* White Coins */}\r\n      <ellipse\r\n        cy={\r\n          rowIndex * (coinMargin + coinRadius * 2) + (coinRadius + coinMargin)\r\n        }\r\n        cx={\r\n          colIndex * (coinMargin + coinRadius * 2) + (coinRadius + coinMargin)\r\n        }\r\n        id={\"row\" + rowIndex + \"_col\" + colIndex}\r\n        className={`\r\n                      ${classes.White} \r\n                      ${isButtonsDisabled ? classes.Disabled : classes.Enabled}\r\n                      `}\r\n        rx={coinRadius}\r\n        ry={coinRadius}\r\n        val={cell}\r\n        onClick={() => dropCoin(colIndex)}\r\n      />\r\n\r\n      {/* Colored Coins */}\r\n      <Slide direction=\"down\" in={cell != 0} timeout={1000}>\r\n        <ellipse\r\n          cy={\r\n            rowIndex * (coinMargin + coinRadius * 2) + (coinRadius + coinMargin)\r\n          }\r\n          cx={\r\n            colIndex * (coinMargin + coinRadius * 2) + (coinRadius + coinMargin)\r\n          }\r\n          id={\"row\" + rowIndex + \"_col\" + colIndex}\r\n          className={`\r\n                      ${classes[cell]} \r\n                      ${isButtonsDisabled ? classes.Disabled : classes.Enabled}\r\n                      `}\r\n          rx={coinRadius}\r\n          ry={coinRadius}\r\n          val={cell}\r\n          onClick={() => dropCoin(colIndex)}\r\n        />\r\n      </Slide>\r\n    </g>\r\n  );\r\n}\r\n\r\nexport default Coin;\r\n","import React, { useState } from \"react\";\r\nimport { Button, Paper, Container } from \"@material-ui/core\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport Coin from \"../components/Coin\";\r\n\r\nconst useStyles = makeStyles({\r\n  Blue: {\r\n    fill: \"#0500fd\",\r\n  },\r\n  marginx150: {\r\n    marginLeft: 150,\r\n    marginRight: 150,\r\n  },\r\n});\r\n\r\n\r\n\r\nfunction GameBoard({grid, setGrid, redsTurn, isButtonsDisabled, dropCoin}) {\r\n  // Define Const vars\r\n  const theme = useTheme();\r\n  const isScreenLarge = useMediaQuery(theme.breakpoints.up(\"lg\"));\r\n  const classes = useStyles();\r\n\r\n\r\n  return (\r\n    <Container>\r\n      <h1> {redsTurn ? \"Red\" : \"Yellow\"} Turn! </h1>\r\n      <svg\r\n        viewBox=\"0 0 100 100\"\r\n        version=\"1.1\"\r\n        id=\"GameBoard\"\r\n        className={isScreenLarge ? classes.marginx150 : \"\"}\r\n      >\r\n        <g id=\"BlueRectangle\">\r\n          <rect className={classes.Blue} id=\"rect939\" width=\"100\" height=\"85\" />\r\n        </g>\r\n        <g id=\"Coins\">\r\n          {grid.map((row, rowIndex) => (\r\n            <g>\r\n              {row.map((cell, colIndex) => (\r\n                <Coin\r\n                  rowIndex={rowIndex}\r\n                  colIndex={colIndex}\r\n                  cell={cell}\r\n                  isButtonsDisabled={isButtonsDisabled}\r\n                  dropCoin={dropCoin}\r\n                />\r\n              ))}\r\n            </g>\r\n          ))}\r\n        </g>\r\n      </svg>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default GameBoard;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport gameEventHandlers from \"../utils/gameEventHandlers\";\r\nimport GameMenu from \"../components/GameMenu\";\r\nimport GameBoard from \"../components/GameBoard\";\r\nimport { Container } from \"@material-ui/core\";\r\nimport _ from \"lodash\"; // Import the entire lodash library\r\n\r\nfunction ConnectFour() {\r\n    // Declare State Variables\r\n    const [message, setMessage] = useState(\"Fetching Message\");\r\n    const numCols = 7;\r\n    const numRows = 6;\r\n    const [isButtonsDisabled, setIsButtonsDisabled] = useState(false);\r\n    const [redsTurn, setRedsTurn] = useState(true);\r\n    let directionsMatrix = {\r\n        vertical: { south: [1, 0], north: [-1, 0] },\r\n        horizontal: { east: [0, 1], west: [0, -1] },\r\n        backward: { southEast: [1, 1], northWest: [-1, -1] },\r\n        forward: { southWest: [1, -1], northEast: [-1, 1] },\r\n    };\r\n\r\n    let initialGrid = Array.from({ length: numRows }, () =>\r\n        Array.from({ length: numCols }, () => \"\")\r\n    );\r\n    const [grid, setGrid] = useState(initialGrid);\r\n\r\n    // Function to restart the game\r\n    const newGame = () => {\r\n        setRedsTurn(true)\r\n        setGrid(initialGrid)\r\n        setIsButtonsDisabled(false)\r\n    }\r\n\r\n    // Function to drop a coin into a column\r\n    const dropCoin = (colnum) => {\r\n        if (isButtonsDisabled) {\r\n            return;\r\n        }\r\n        setIsButtonsDisabled(true); // Disable all buttons for 1.5 second after clicking\r\n        setTimeout(() => setIsButtonsDisabled(false), 1500);\r\n\r\n        const newGrid = _.cloneDeep(grid); //create a deep clone of the grid\r\n\r\n        // loop from bottom to top\r\n        for (var rowNum = newGrid.length - 1; rowNum >= 0; rowNum--) {\r\n            // if cell is null\r\n            if (!newGrid[rowNum][colnum]) {\r\n                let color = redsTurn ? \"Red\" : \"Yellow\"; //determine who's turn it is\r\n                newGrid[rowNum][colnum] = color; // add coin to cell\r\n\r\n                setGrid(newGrid); // Update the grid\r\n\r\n                // Check if player has won\r\n                if (playerHasWon(colnum, rowNum, color, newGrid)) {\r\n                    announceWinner(color);\r\n                }\r\n\r\n                setRedsTurn(!redsTurn); // Toggle turn\r\n                break;\r\n            }\r\n        }\r\n    };\r\n\r\n    // Function to test if the player has won the game -- return BOOL\r\n    const playerHasWon = (colnum, rowNum, playerColor, newGrid) => {\r\n        //For each [North/South, East/West, NorthEast/Northwest, SouthEast/Southwest]\r\n        for (let axis in directionsMatrix) {\r\n            // We define numMatches here so that \"East\" and \"West\" share the same count,\r\n            let numMatches = 1;\r\n\r\n            // For each [North, South]\r\n            for (let direction in directionsMatrix[axis]) {\r\n                // Get X/Y co-ordinates of our dropped coin\r\n                let cellReference = [rowNum, colnum];\r\n\r\n                // Add co-ordinates of 1 cell in test direction (eg \"North\")\r\n                let testCell = newGrid[cellReference[0]][cellReference[1]];\r\n\r\n                // Count how many matching color cells are in that direction\r\n                while (testCell == playerColor) {\r\n                    try {\r\n                        // Add co-ordinates of cell in test direction (eg \"North\")\r\n                        cellReference[0] +=\r\n                            directionsMatrix[axis][direction][0];\r\n                        cellReference[1] +=\r\n                            directionsMatrix[axis][direction][1];\r\n                        testCell = newGrid[cellReference[0]][cellReference[1]];\r\n\r\n                        // Test if cell is matching color\r\n                        if (testCell == playerColor) {\r\n                            numMatches += 1;\r\n                            if (numMatches >= 4) {\r\n                                return true; // If our count reaches 4, the player has won the game\r\n                            }\r\n                        }\r\n                    } catch (error) {\r\n                        // Exceptions are to be expected here.\r\n                        // We wrap this in a try/catch to ignore the array overflow exceptions\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (numMatches >= 4) {\r\n                    return true; // If our count reaches 4, the player has won the game\r\n                }\r\n            }\r\n        }\r\n\r\n        return false; // If we reach this statement: they have NOT won the game\r\n    };\r\n\r\n    // Function to Display a popup congratulating the winner\r\n    const announceWinner = (winnerColor) => {\r\n        setTimeout(\r\n            // Wait until coin drops before announcing\r\n            () => alert(`WINNER!, ${winnerColor} has won the game!`),\r\n            1500\r\n        );\r\n        setTimeout(() => setIsButtonsDisabled(true), 1500); // Stop the game from being continued\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Asyncronously connect to backend\r\n        gameEventHandlers.createListeners(setMessage);\r\n    }, []);\r\n\r\n    // Return App HTML\r\n    return (\r\n        <div>\r\n            <GameMenu\r\n                newGame={newGame}\r\n            />\r\n            <Container>\r\n                <h1>{message}</h1>\r\n            </Container>\r\n\r\n            <GameBoard\r\n                grid={grid}\r\n                setGrid={setGrid}\r\n                redsTurn={redsTurn}\r\n                isButtonsDisabled={isButtonsDisabled}\r\n                dropCoin={dropCoin}\r\n            />\r\n        </div>\r\n    );\r\n}\r\nexport default ConnectFour;\r\n","import React from \"react\";\r\nimport ConnectFour from \"./pages/ConnectFour\";\r\n\r\nfunction App() {\r\n  return (\r\n    <ConnectFour />\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}