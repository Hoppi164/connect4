{"version":3,"sources":["utils/gameEventHandlers.js","components/GameMenu.js","components/GameBoard.js","pages/ConnectFour.js","App.js","serviceWorker.js","index.js"],"names":["socket","io","window","location","origin","setMessage","onSocketConnected","a","joinRoom","onSocketDisconnect","console","log","emit","roomID","on","GameMenu","Grid","container","justify","m","Card","mt","noValidate","autoComplete","CardContent","item","xs","ButtonGroup","variant","color","aria-label","Button","CardActions","Box","TextField","id","label","fullWidth","useStyles","makeStyles","table","minWidth","GameBoard","classes","initialGrid","Array","from","length","useState","redsTurn","setRedsTurn","grid","setGrid","Container","TableContainer","component","Paper","Table","className","TableHead","TableRow","map","col","index","TableCell","align","key","onClick","colnum","newGrid","_","cloneDeep","rowNum","dropCoin","TableBody","row","cell","alt","src","height","ConnectFour","message","useEffect","gameEventHandlers","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4NACA,MAAMA,E,MAASC,GAAGC,OAAOC,SAASC,QA0BnB,MAxBUC,IACvB,MAAMC,EAAiB,uCAAG,sBAAAC,EAAA,sDAGxBC,IACAH,EAAW,aAJa,2CAAH,qDAOjBI,EAAkB,uCAAG,sBAAAF,EAAA,sDAEzBG,QAAQC,IAAI,mCAFa,2CAAH,qDAKlBH,EAAQ,uCAAG,sBAAAD,EAAA,sDACfP,EAAOY,KAAK,WAAY,CAAEC,OAAQ,SADnB,2CAAH,qDAMdb,EAAOc,GAAG,UAAWR,GAErBN,EAAOc,GAAG,aAAcL,I,wECwBXM,MApCf,WACE,OACE,gBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAASC,EAAG,GAClC,gBAACC,EAAA,EAAD,CAAMC,GAAI,GACR,wBAAMC,YAAU,EAACC,aAAa,OAC5B,gBAACC,EAAA,EAAD,KACE,gBAACR,EAAA,EAAD,CAAMS,MAAI,EAACC,GAAI,IACb,gBAACC,EAAA,EAAD,CACEC,QAAQ,YACRC,MAAM,UACNC,aAAW,kCAEX,gBAACC,EAAA,EAAD,sBACA,gBAACA,EAAA,EAAD,2BACA,gBAACA,EAAA,EAAD,4BAIN,gBAACC,EAAA,EAAD,KACE,gBAAChB,EAAA,EAAD,CAAMS,MAAI,EAACC,GAAI,IACb,gBAACO,EAAA,EAAD,CAAKZ,GAAI,GACP,gBAACa,EAAA,EAAD,CACEC,GAAG,iBACHC,MAAM,UACNR,QAAQ,WACRS,WAAS,W,mHCrB3B,MAAMC,EAAYC,YAAW,CAC3BC,MAAO,CACLC,SAAU,OA0ECC,MAtEf,WAEE,MAAMC,EAAUL,IAIhB,IAAIM,EAAcC,MAAMC,KAAK,CAAEC,OAFf,GAEkC,IAChDF,MAAMC,KAAK,CAAEC,OAJC,GAIkB,IAAM,IAPrB,QAWaC,oBAAS,GAXtB,mBAWZC,EAXY,KAWFC,EAXE,OAYKF,mBAASJ,GAZd,mBAYZO,EAZY,KAYNC,EAZM,KAgCnB,OACE,kBAACC,EAAA,EAAD,KACE,gCAAMJ,EAAW,MAAQ,SAAzB,WAEA,kBAACK,EAAA,EAAD,CAAgBC,UAAWC,KACzB,kBAACC,EAAA,EAAD,CAAOC,UAAWf,EAAQH,OACxB,kBAACmB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACGT,EAAK,GAAGU,IAAI,CAACC,EAAKC,IACjB,kBAACC,EAAA,EAAD,CAAWC,MAAM,SAASC,IAAKH,GAC7B,kBAAChC,EAAA,EAAD,CACEH,QAAQ,YACRC,MAAM,UACNsC,QAAS,IA/BTC,KAChB,MAAMC,EAAUC,IAAEC,UAAUpB,GAG5B,IAAK,IAAIqB,EAASH,EAAQtB,OAAS,EAAGyB,GAAU,EAAGA,IAEjD,IAAKH,EAAQG,GAAQJ,GAAS,CAC5B,IAAIvC,EAAQoB,EAAW,MAAQ,SAC/BoB,EAAQG,GAAQJ,GAAUvC,EAC1BqB,GAAaD,GACb,MAKJG,EAAQiB,IAgBuBI,CAASV,IAExB,kBAAC,IAAD,WAMV,kBAACW,EAAA,EAAD,KACGvB,EAAKU,IAAI,CAACc,EAAKZ,IACd,kBAACH,EAAA,EAAD,CAAUM,IAAKH,GACZY,EAAId,IAAI,CAACe,EAAMb,IACd,kBAACC,EAAA,EAAD,CAAWC,MAAM,SAASC,IAAKH,GAC7B,yBAAKc,IAAI,OAAOC,IAAKF,EAAO,OAAQG,OAAQ,cCxDjDC,MAlBf,WAAwB,MAAD,EACWhC,mBAAS,oBADpB,mBACZiC,EADY,KACH5E,EADG,KAOnB,OALA6E,oBAAU,KACNC,EAAkC9E,IACnC,IAIC,6BACI,kBAAC,EAAD,MACA,kBAACgD,EAAA,EAAD,KACI,4BAAK4B,IAGT,kBAAC,EAAD,QCXGG,MANf,WACE,OACE,kBAAC,EAAD,OCOgBC,QACW,cAA7BnF,OAAOC,SAASmF,UAEe,UAA7BpF,OAAOC,SAASmF,UAEhBpF,OAAOC,SAASmF,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAKC,IACjCA,EAAaC,gB","file":"static/js/main.66ff8c7b.chunk.js","sourcesContent":["import io from \"socket.io-client\";\r\nconst socket = io(window.location.origin);\r\n\r\nconst createListeners = (setMessage) => {\r\n  const onSocketConnected = async () => {\r\n    // Send local player data to the game server\r\n    // socket.emit(\"new player\", {name: 'test'});\r\n    joinRoom();\r\n    setMessage(\"Connected\");\r\n  };\r\n\r\n  const onSocketDisconnect = async () => {\r\n    // Socket disconnected\r\n    console.log(\"Disconnected from socket server\");\r\n  };\r\n\r\n  const joinRoom = async () => {\r\n    socket.emit(\"joinRoom\", { roomID: \"1234\" });\r\n  };\r\n  // const socket = io.connect(\"http://localhost\", {port: 8000, transports: [\"websocket\"]});\r\n  // Start listening for events\r\n  // Socket connection successful\r\n  socket.on(\"connect\", onSocketConnected);\r\n  // Socket disconnection\r\n  socket.on(\"disconnect\", onSocketDisconnect);\r\n};\r\n\r\nexport default { createListeners };\r\n","import * as React from \"react\";\r\nimport {\r\n  Button,\r\n  TextField,\r\n  ButtonGroup,\r\n  Grid,\r\n  Box,\r\n  Card,\r\n  CardActions,\r\n  CardContent,\r\n} from \"@material-ui/core\";\r\n\r\nfunction GameMenu() {\r\n  return (\r\n    <Grid container justify=\"center\" m={2}>\r\n      <Card mt={2}>\r\n        <form noValidate autoComplete=\"off\">\r\n          <CardContent>\r\n            <Grid item xs={12}>\r\n              <ButtonGroup\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                aria-label=\"contained primary button group\"\r\n              >\r\n                <Button>Local Hotseat</Button>\r\n                <Button>Create Online Room</Button>\r\n                <Button>Join Online Room</Button>\r\n              </ButtonGroup>\r\n            </Grid>\r\n          </CardContent>\r\n          <CardActions>\r\n            <Grid item xs={12}>\r\n              <Box mt={1}>\r\n                <TextField\r\n                  id=\"outlined-basic\"\r\n                  label=\"Room ID\"\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                />\r\n              </Box>\r\n            </Grid>\r\n          </CardActions>\r\n        </form>\r\n      </Card>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default GameMenu;\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Container,\r\n} from \"@material-ui/core\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport _ from \"lodash\"; // Import the entire lodash library\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n});\r\n\r\nfunction GameBoard() {\r\n  // Define Const vars\r\n  const classes = useStyles();\r\n  const numCols = 7;\r\n  const numRows = 6;\r\n  // Create row x col sized empty array\r\n  let initialGrid = Array.from({ length: numRows }, () =>\r\n    Array.from({ length: numCols }, () => 0)\r\n  );\r\n\r\n  // Define state Vars\r\n  const [redsTurn, setRedsTurn] = useState(true);\r\n  const [grid, setGrid] = useState(initialGrid);\r\n\r\n  const dropCoin = (colnum) => {\r\n    const newGrid = _.cloneDeep(grid); //create a deep clone of the grid\r\n\r\n    // loop from bottom to top\r\n    for (var rowNum = newGrid.length - 1; rowNum >= 0; rowNum--) {\r\n      // if cell is null\r\n      if (!newGrid[rowNum][colnum]) {\r\n        let color = redsTurn ? \"Red\" : \"Yellow\"; //determine who's turn it is\r\n        newGrid[rowNum][colnum] = color; // add coin to cell\r\n        setRedsTurn(!redsTurn); // Toggle turn\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Update the grid\r\n    setGrid(newGrid);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <h1> {redsTurn ? \"Red\" : \"Yellow\"} Turn! </h1>\r\n\r\n      <TableContainer component={Paper}>\r\n        <Table className={classes.table}>\r\n          <TableHead>\r\n            <TableRow>\r\n              {grid[0].map((col, index) => (\r\n                <TableCell align=\"center\" key={index}>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={() => dropCoin(index)}\r\n                  >\r\n                    <ArrowDownwardIcon />\r\n                  </Button>\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {grid.map((row, index) => (\r\n              <TableRow key={index}>\r\n                {row.map((cell, index) => (\r\n                  <TableCell align=\"center\" key={index}>\r\n                    <img alt=\"coin\" src={cell + \".svg\"} height={70}></img>\r\n                  </TableCell>\r\n                ))}\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default GameBoard;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport gameEventHandlers from \"../utils/gameEventHandlers\";\r\nimport GameMenu from \"../components/GameMenu\";\r\nimport GameBoard from \"../components/GameBoard\";\r\nimport { Container } from \"@material-ui/core\";\r\n\r\nfunction ConnectFour() {\r\n    const [message, setMessage] = useState(\"Fetching Message\");\r\n    useEffect(() => {\r\n        gameEventHandlers.createListeners(setMessage);\r\n    }, []);\r\n\r\n    // Return App HTML\r\n    return (\r\n        <div>\r\n            <GameMenu />\r\n            <Container>\r\n                <h1>{message}</h1>\r\n            </Container>\r\n            {/* TODO Passing message through to GameBoard */}\r\n            <GameBoard />\r\n        </div>\r\n    );\r\n}\r\nexport default ConnectFour;\r\n","import React from \"react\";\r\nimport ConnectFour from \"./pages/ConnectFour\";\r\n\r\nfunction App() {\r\n  return (\r\n    <ConnectFour />\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}